{
  "configs": [
    "reportable is a concept",
    {
      "operators": [
        "([user|])"
      ],
      "bridges": [
        {
          "id": "user",
          "parents": [
            "theAble",
            "reportable"
          ],
          "words": [
            {
              "word": "user",
              "number": "one",
              "database": "sample_mflix",
              "collection": "users",
              "path": [
                "name"
              ]
            },
            {
              "word": "users",
              "number": "many",
              "database": "sample_mflix",
              "collection": "users",
              "path": [
                "name"
              ]
            }
          ]
        }
      ]
    },
    "user modifies collection",
    {
      "name": "mongo",
      "operators": [
        "([make] ([report]))",
        "([state])",
        "([changeState|make] ([reportElement]) (state/*))",
        "([reportElementProperty])",
        "((reportElement/* && !@<color_colors && !@<case) [compoundReportElement] (reportElement/* && !@<color_colors && !@<case))",
        "([background])",
        "([header])",
        "([table])",
        "([case])",
        "([uppercase])",
        "([lowercase])",
        "([show] (reportable/*))",
        "([showCollection|show] (collection/*))",
        "([showReport|show] (report/*))",
        "([capitalize] ([reportElement]))",
        "([sales|])",
        "([year])",
        "([email])",
        "([movie])",
        "([thisReportElement|this] (reportElement/*))"
      ],
      "hierarchy": [
        [
          "color_colors",
          "state"
        ],
        [
          "case",
          "state"
        ],
        [
          "color_colors",
          "reportElement"
        ],
        [
          "case",
          "reportElement"
        ]
      ],
      "bridges": [
        {
          "id": "case",
          "words": [
            {
              "word": "case",
              "number": "one"
            },
            {
              "word": "cases",
              "number": "many"
            }
          ],
          "isA": [
            "reportElementProperty"
          ]
        },
        {
          "id": "uppercase",
          "words": [
            {
              "word": "upper",
              "number": "one",
              "value": "uppercase"
            },
            {
              "word": "uppers",
              "number": "many",
              "value": "uppercase"
            }
          ],
          "isA": [
            "case"
          ]
        },
        {
          "id": "lowercase",
          "words": [
            {
              "word": "lower",
              "number": "one",
              "value": "lowercase"
            },
            {
              "word": "lowers",
              "number": "many",
              "value": "lowercase"
            }
          ],
          "isA": [
            "case"
          ]
        },
        {
          "id": "reportElementProperty"
        },
        {
          "id": "compoundReportElement",
          "convolution": true,
          "isA": [
            "reportElement",
            "theAble"
          ],
          "bridge": "{ ...next(operator), reportElements: append(default(before[0].reportElements, [before[0]]), default(after[0].reportElements, [after[0]])) }",
          "generatorp": "({context, gs}) => gs(context.reportElements)"
        },
        {
          "id": "make",
          "bridge": "{ ...next(operator), report: after[0] }",
          "parents": [
            "verby"
          ],
          "generatorp": "async ({context, g}) => `make ${await g(context.report)}`",
          "semantic": "({context, km, api}) => {\n        api.newReport()\n      }"
        },
        {
          "id": "state",
          "bridge": "{ ...next(operator) }"
        },
        {
          "id": "thisReportElement",
          "parents": [
            "articlePOS"
          ],
          "bridge": "{ ...next(after[0]), modifiers: append(['this'], after[0].modifiers), this: operator }"
        },
        {
          "id": "changeState",
          "bridge": "{ ...next(operator), reportElement: after[0], newState: after[1] }",
          "parents": [
            "verby"
          ],
          "generatorp": "async ({context, g}) => `make ${await g(context.reportElement)} ${await g(context.newState)}`",
          "semantic": "({context, km, api, isA}) => {\n        const getProperty = (reportElements, state) => {\n          let property;\n          for (const re of reportElements) {\n            if (isA(re.marker, 'reportElementProperty')) {\n              if (re.marker == 'background') {\n                property = 'background-color' \n                break;\n              } if (isA(re.marker, 'case')) {\n                property = 'text-transform' \n                break;\n              } if (re.marker == 'color') {\n                property = 'color' \n                break;\n              }\n            }\n          }\n          if (!property) {\n            if (isA(state.marker, 'color_colors')) {\n              return 'color'\n            }\n            if (isA(state.marker, 'case')) {\n              return 'text-transform'\n            }\n          }\n          return property\n        }\n        const report = api.current()\n        const counts = image.count(report.imageSpec)\n        console.log('report -----------------', JSON.stringify(report, null, 2))\n        console.log('counts-----------------', JSON.stringify(counts, null, 2))\n        if (context.selected) {\n          image.selecting(null, report.imageSpec)\n          const reportElements = getReportElements(report.select.reportElement)\n          const property = getProperty(reportElements, context.newState)\n          report.addRule(`.${context.selected.selected} ${stateToCSS(isA, property, context.newState)}`)\n        } else {\n          const reportElements = getReportElements(context.reportElement)\n          const lastContext = reportElements.slice(-1)[0]\n          const isPlural = lastContext.number == 'many'\n          const state = context.newState\n          const property = getProperty(reportElements, state)\n          const css = stateToCSS(isA, property, state)\n          if (isPlural || image.countSelected(report.imageSpec, reportElements) == 1) {\n            // make sure the state exactely matches correct CSS because the delete \"make the header not blue' needs that\n            const selector = image.selector(report.imageSpec, reportElements)\n            if (css) {\n              if (state.negated) {\n                report.removeRule(`${selector} ${css}`)\n              } else {\n                report.addRule(`${selector} ${css}`)\n              }\n            }\n          } else {\n            image.selecting('header', report.imageSpec)\n            if (!report.imageSpec.rules) {\n              report.imageSpec.rules = []\n            }\n            report.imageSpec.rules.push(`.highlight ${css}`)\n            report.select = context\n          }\n        }\n        api.show(report)\n      }"
        },
        {
          "id": "capitalize",
          "parents": [
            "verby"
          ],
          "bridge": "{ ...next(operator), element: after[0] }",
          "generatorp": "async ({context, gp}) => `${context.word} ${await gp(context.element)}`",
          "semantic": "({context, mentions, api}) => {\n        const report = api.current()\n        if (context.element.marker == 'header') {\n          report.imageSpec.capitalizeHeader = true\n          if (report.imageSpec.explicit) {\n            report.imageSpec.rows.forEach( (row) => {\n              row.forEach( (column) => {\n                column.capitalizeHeader = true\n              })\n            })\n          }\n          api.show(report)\n        } else if (context.element.marker == 'this') {\n          if (context.selected) {\n            console.log('the user selected', context.selected)\n            const imageSpec = report.imageSpec\n            report.addRule(`.${context.selected.selected} { text-transform: capitalize; }`)\n            imageSpec.headers.selecting = null\n            imageSpec.headers.columns.forEach( (column) => column.selecting = null )\n            api.show(report)\n          } else {\n            /*\n            const headerIds = []\n            for (let ctr = 0; ctr < report.imageSpec.headers.length; ++ctr) {\n              headerIds.push(['report', 0, 'header', ctr])\n            }\n            */\n            if (report.imageSpec.headers) {\n              report.imageSpec.headers.columns.forEach( (column, index) => {\n                column.selecting = [{ id: `column_${index}`, name: 'X', className: `column_${index}` }]\n              })\n              report.imageSpec.headers.selecting = [{ id: 'header', name: 'X', className: 'header' }]\n            }\n            /*\n            report.imageSpec.selecting = {\n              headers: {\n                each: headerIds,\n                all: [0, 'header'],\n              },\n            }\n            */\n            report.select = context\n            console.log(\"after capitalize\", JSON.stringify(report, null, 2))\n            api.show(report)\n          }\n        }\n      }"
        },
        {
          "id": "this",
          "parents": [
            "reportElement"
          ]
        },
        {
          "id": "reportElement"
        },
        {
          "id": "header",
          "words": [
            {
              "word": "header",
              "number": "one"
            },
            {
              "word": "headers",
              "number": "many"
            }
          ],
          "parents": [
            "theAble",
            "reportElement"
          ]
        },
        {
          "id": "background",
          "words": [
            {
              "word": "background",
              "number": "one"
            },
            {
              "word": "backgrounds",
              "number": "many"
            }
          ],
          "parents": [
            "theAble",
            "reportElement",
            "reportElementProperty"
          ]
        },
        {
          "id": "table",
          "words": [
            {
              "word": "table",
              "number": "one"
            },
            {
              "word": "tables",
              "number": "many"
            }
          ],
          "parents": [
            "theAble",
            "reportElement"
          ]
        },
        {
          "id": "report",
          "parents": [
            "theAble",
            "nameable"
          ]
        },
        {
          "id": "showReport",
          "bridge": "{ ...next(operator), show: after[0] }",
          "parents": [
            "verby"
          ],
          "generatorp": "async ({context, g}) => `show ${await g(context.show)}`",
          "semantic": "async ({context, kms, api}) => {\n        debugger\n        const name = context.show.value\n        const report = kms.nameable.api.get({ marker: 'report' }, name)\n        api.setCurrent(report)\n        api.show(report)\n      }"
        },
        {
          "id": "showCollection",
          "bridge": "{ ...next(operator), show: after[0] }",
          "parents": [
            "verby"
          ],
          "generatorp": "async ({context, g}) => `show ${await g(context.show)}`",
          "semantic": "async ({context, isA, km, mentions, api, flatten}) => {\n        console.log(\"in show collection\")\n        let report = api.newReport()\n        if (context.chosens) {\n          console.log('in chosen', JSON.stringify(context.chosens))\n          /*\n              < in chosen {\n              <   chosen: 'select',\n              <   choices: [\n              <     { text: '_id', id: '_id' },\n              <     { text: 'name', id: 'name', selected: true },\n              <     { text: 'email', id: 'email', selected: true },\n              <     { text: 'password', id: 'password' }\n              <   ]\n          */\n          const reportable = context.reportables[context.chosens.length-1]\n          const chosen = context.chosens[context.chosens.length-1]\n\n          report.dataSpec = {\n                dbName: reportable.database,\n                collectionName: reportable.collection,\n                limit: 10,\n                aggregation: [] \n          }\n          const columns = []\n          const properties = []\n          for (const column of chosen.choices) {\n            if (column.selected) {\n              columns.push({ text: column.text })\n              properties.push(`$${column.id}`)\n            }\n          }\n          // columns: properties.map( (c) => { return { text: gp(c) } })\n          report.imageSpec = {\n            headers: {\n              columns,\n            },\n            colgroups: properties.map( (e, i) => `column_${i}` ),\n            table: true,\n            field: [],\n            // rows: ['$name', '$age', '$fav_colors'],\n            // rows: properties.map( (property) => property.path.map((p) => '$'+p).join('.') )\n            // rows: properties.map( (property) => property.path.map((p) => '$'+p).join('.') )\n            rows: properties\n          }\n          api.show(report)\n        } else {\n          const reportables = []\n          for (const modifier of context.show.modifiers) {\n            if (isA(context.show[modifier].marker, 'reportable')) {\n              reportables.push(context.show[modifier])\n            }\n          }\n          context.reportables = reportables // save for callback\n          const reportable = reportables[0]\n          const fields = await getFields(reportable.database, reportable.collection)\n          console.log('fields', fields)\n          api.addResponse({ chooseFields: {\n            title: `Select the fields from the ${reportable.collection} collection in the ${reportable.database}`,\n            choices: fields.map((field) => { return { text: field, id: field } }),\n          }})\n          context.chosens = [] // for callback\n          report.showCollection = context\n        }\n      }"
        },
        {
          "id": "show",
          "bridge": "{ ...next(operator), show: after[0] }",
          "parents": [
            "verby"
          ],
          "generatorp": "async ({context, g}) => `show ${await g(context.show)}`",
          "semantic": "async ({context, km, mentions, api, flatten, gp}) => {\n        const report = api.newReport()\n        const toArray = (context) => {\n          if (context.isList) {\n            return context.value\n          } else {\n            return [context]\n          }\n        }\n\n        const properties = toArray(context.show)\n\n        // split by table\n        const components = {}\n        for (const property of properties) {\n          if (!components[property.database]) {\n            components[property.database] = {}\n          }\n          const dbs = components[property.database]\n          if (!dbs[property.collection]) {\n            dbs[property.collection] = []\n          }\n          const collection = dbs[property.collection]\n          collection.push(property)\n        }\n\n        const dataSpecs = []\n        const imageSpecs = []\n        for (const dbName in components) {\n          for (const collectionName in components[dbName]) {\n            dataSpecs.push({\n                dbName: dbName,\n                collectionName: collectionName,\n                limit: 10,\n                aggregation: [] \n            })\n            const properties = components[dbName][collectionName]\n            const columns = []\n            for (const column of properties) {\n              columns.push({ text: await gp(column) })\n            }\n            // columns: properties.map( (c) => { return { text: gp(c) } })\n            imageSpecs.push({\n              headers: {\n                columns,\n              },\n              colgroups: properties.map( (e, i) => `column_${i}` ),\n              table: true,\n              field: [],\n              // rows: ['$name', '$age', '$fav_colors'],\n              rows: properties.map( (property) => property.path.map((p) => '$'+p).join('.') )\n            })\n          }\n        }\n\n        if (dataSpecs.length == 1) {\n          report.dataSpec = dataSpecs[0]\n          report.imageSpec = imageSpecs[0]\n        } else {\n          report.dataSpec = dataSpecs\n          for (let i = 0; i < imageSpecs.length; ++i) {\n            imageSpecs[i].field = [i]\n          }\n          report.imageSpec = {\n            headers: { columns: [] },\n            table: true,\n            explicit: true,\n            field: [],\n            rows: [imageSpecs]\n          }\n        }\n        /*\n        report.dataSpec = { \n          dbName: properties[0].database, \n          collectionName: properties[0].collection, \n          aggregation: [] \n        }\n\n        report.imageSpec = {\n          headers: properties.map( gp ),\n          table: true,\n          field: [],\n          // rows: ['$name', '$age', '$fav_colors'],\n          rows: properties.map( (property) => property.path.map((p) => '$'+p).join('.') )\n        }\n        */\n\n        api.show(report)\n      }"
        },
        {
          "id": "sales",
          "parents": [
            "reportable",
            "theAble"
          ],
          "words": [
            {
              "word": "sales",
              "database": "mongo_test_database",
              "collection": "sales",
              "path": [
                "sales"
              ]
            }
          ]
        },
        {
          "id": "year",
          "parents": [
            "reportable",
            "theAble"
          ],
          "words": [
            {
              "word": "year",
              "database": "mongo_test_database",
              "collection": "sales",
              "path": [
                "year"
              ]
            }
          ]
        },
        {
          "id": "email",
          "parents": [
            "reportable",
            "theAble"
          ],
          "words": [
            {
              "word": "email",
              "database": "sample_mflix",
              "collection": "users",
              "path": [
                "email"
              ]
            }
          ]
        },
        {
          "id": "movie",
          "parents": [
            "reportable",
            "theAble"
          ],
          "words": [
            {
              "word": "movies",
              "database": "sample_mflix",
              "collection": "movies",
              "path": [
                "title"
              ]
            }
          ]
        }
      ],
      "priorities": [
        {
          "context": [
            [
              "show",
              0
            ],
            [
              "list",
              0
            ]
          ],
          "choose": [
            1
          ]
        }
      ]
    }
  ],
  "resultss": [
    {
      "hierarchy": [
        [
          "a",
          "articlePOS",
          false
        ],
        [
          "adjective",
          "adjective",
          false
        ],
        [
          "aqua_colors",
          "blue_colors",
          false
        ],
        [
          "aqua_colors",
          "hierarchyAble",
          false
        ],
        [
          "aqua_colors",
          "isEdee",
          false
        ],
        [
          "aqua_colors",
          "isEder",
          false
        ],
        [
          "aqua_colors",
          "object",
          false
        ],
        [
          "aqua_colors",
          "property",
          false
        ],
        [
          "aqua_colors",
          "queryable",
          false
        ],
        [
          "aqua_colors",
          "theAble",
          false
        ],
        [
          "aquamarine_colors",
          "blue_colors",
          false
        ],
        [
          "aquamarine_colors",
          "hierarchyAble",
          false
        ],
        [
          "aquamarine_colors",
          "isEdee",
          false
        ],
        [
          "aquamarine_colors",
          "isEder",
          false
        ],
        [
          "aquamarine_colors",
          "object",
          false
        ],
        [
          "aquamarine_colors",
          "property",
          false
        ],
        [
          "aquamarine_colors",
          "queryable",
          false
        ],
        [
          "aquamarine_colors",
          "theAble",
          false
        ],
        [
          "articlePOS",
          "articlePOS",
          false
        ],
        [
          "azure_colors",
          "hierarchyAble",
          false
        ],
        [
          "azure_colors",
          "isEdee",
          false
        ],
        [
          "azure_colors",
          "isEder",
          false
        ],
        [
          "azure_colors",
          "object",
          false
        ],
        [
          "azure_colors",
          "property",
          false
        ],
        [
          "azure_colors",
          "queryable",
          false
        ],
        [
          "azure_colors",
          "theAble",
          false
        ],
        [
          "azure_colors",
          "white_colors",
          false
        ],
        [
          "beige_colors",
          "hierarchyAble",
          false
        ],
        [
          "beige_colors",
          "isEdee",
          false
        ],
        [
          "beige_colors",
          "isEder",
          false
        ],
        [
          "beige_colors",
          "object",
          false
        ],
        [
          "beige_colors",
          "property",
          false
        ],
        [
          "beige_colors",
          "queryable",
          false
        ],
        [
          "beige_colors",
          "theAble",
          false
        ],
        [
          "beige_colors",
          "white_colors",
          false
        ],
        [
          "between",
          "preposition",
          false
        ],
        [
          "black_colors",
          "gray_colors",
          false
        ],
        [
          "black_colors",
          "hierarchyAble",
          false
        ],
        [
          "black_colors",
          "isEdee",
          false
        ],
        [
          "black_colors",
          "isEder",
          false
        ],
        [
          "black_colors",
          "object",
          false
        ],
        [
          "black_colors",
          "property",
          false
        ],
        [
          "black_colors",
          "queryable",
          false
        ],
        [
          "black_colors",
          "theAble",
          false
        ],
        [
          "blue_colors",
          "color_colors",
          false
        ],
        [
          "blue_colors",
          "hierarchyAble",
          false
        ],
        [
          "blue_colors",
          "isEdee",
          false
        ],
        [
          "blue_colors",
          "isEder",
          false
        ],
        [
          "blue_colors",
          "object",
          false
        ],
        [
          "blue_colors",
          "property",
          false
        ],
        [
          "blue_colors",
          "queryable",
          false
        ],
        [
          "blue_colors",
          "theAble",
          false
        ],
        [
          "brightness_colors",
          "color_colors_modifier",
          false
        ],
        [
          "brightness_colors",
          "hierarchyAble",
          false
        ],
        [
          "brightness_colors",
          "isEdee",
          false
        ],
        [
          "brightness_colors",
          "isEder",
          false
        ],
        [
          "brightness_colors",
          "object",
          false
        ],
        [
          "brightness_colors",
          "property",
          false
        ],
        [
          "brightness_colors",
          "queryable",
          false
        ],
        [
          "brightness_colors",
          "theAble",
          false
        ],
        [
          "brightness_colors_color_colors",
          "adjective",
          true
        ],
        [
          "brightness_colors_color_colors",
          "color_colors",
          false
        ],
        [
          "brightness_colors_color_colors",
          "concept",
          false
        ],
        [
          "brightness_colors_color_colors",
          "hierarchyAble",
          false
        ],
        [
          "brightness_colors_color_colors",
          "isEdee",
          false
        ],
        [
          "brightness_colors_color_colors",
          "isEder",
          false
        ],
        [
          "brightness_colors_color_colors",
          "object",
          false
        ],
        [
          "brightness_colors_color_colors",
          "property",
          false
        ],
        [
          "brightness_colors_color_colors",
          "queryable",
          false
        ],
        [
          "brightness_colors_color_colors",
          "theAble",
          false
        ],
        [
          "brown_colors",
          "color_colors",
          false
        ],
        [
          "brown_colors",
          "hierarchyAble",
          false
        ],
        [
          "brown_colors",
          "isEdee",
          false
        ],
        [
          "brown_colors",
          "isEder",
          false
        ],
        [
          "brown_colors",
          "object",
          false
        ],
        [
          "brown_colors",
          "property",
          false
        ],
        [
          "brown_colors",
          "queryable",
          false
        ],
        [
          "brown_colors",
          "theAble",
          false
        ],
        [
          "canBeDoQuestion",
          "canBeDoQuestion",
          false
        ],
        [
          "canBeQuestion",
          "canBeQuestion",
          false
        ],
        [
          "chartruese_colors",
          "green_colors",
          false
        ],
        [
          "chartruese_colors",
          "hierarchyAble",
          false
        ],
        [
          "chartruese_colors",
          "isEdee",
          false
        ],
        [
          "chartruese_colors",
          "isEder",
          false
        ],
        [
          "chartruese_colors",
          "object",
          false
        ],
        [
          "chartruese_colors",
          "property",
          false
        ],
        [
          "chartruese_colors",
          "queryable",
          false
        ],
        [
          "chartruese_colors",
          "theAble",
          false
        ],
        [
          "color_colors",
          "concept",
          false
        ],
        [
          "color_colors",
          "hierarchyAble",
          false
        ],
        [
          "color_colors",
          "isEdee",
          false
        ],
        [
          "color_colors",
          "isEder",
          false
        ],
        [
          "color_colors",
          "object",
          false
        ],
        [
          "color_colors",
          "property",
          false
        ],
        [
          "color_colors",
          "queryable",
          false
        ],
        [
          "color_colors",
          "theAble",
          false
        ],
        [
          "color_colors_modifier",
          "color_colors_modifier",
          false
        ],
        [
          "concept",
          "queryable",
          false
        ],
        [
          "concept",
          "theAble",
          false
        ],
        [
          "crimson_colors",
          "hierarchyAble",
          false
        ],
        [
          "crimson_colors",
          "isEdee",
          false
        ],
        [
          "crimson_colors",
          "isEder",
          false
        ],
        [
          "crimson_colors",
          "object",
          false
        ],
        [
          "crimson_colors",
          "property",
          false
        ],
        [
          "crimson_colors",
          "queryable",
          false
        ],
        [
          "crimson_colors",
          "red_colors",
          false
        ],
        [
          "crimson_colors",
          "theAble",
          false
        ],
        [
          "cyan_colors",
          "blue_colors",
          false
        ],
        [
          "cyan_colors",
          "hierarchyAble",
          false
        ],
        [
          "cyan_colors",
          "isEdee",
          false
        ],
        [
          "cyan_colors",
          "isEder",
          false
        ],
        [
          "cyan_colors",
          "object",
          false
        ],
        [
          "cyan_colors",
          "property",
          false
        ],
        [
          "cyan_colors",
          "queryable",
          false
        ],
        [
          "cyan_colors",
          "theAble",
          false
        ],
        [
          "dark_colors",
          "brightness_colors",
          false
        ],
        [
          "dark_colors",
          "hierarchyAble",
          false
        ],
        [
          "dark_colors",
          "isEdee",
          false
        ],
        [
          "dark_colors",
          "isEder",
          false
        ],
        [
          "dark_colors",
          "object",
          false
        ],
        [
          "dark_colors",
          "property",
          false
        ],
        [
          "dark_colors",
          "queryable",
          false
        ],
        [
          "dark_colors",
          "theAble",
          false
        ],
        [
          "doubleQuote",
          "queryable",
          false
        ],
        [
          "gold_colors",
          "hierarchyAble",
          false
        ],
        [
          "gold_colors",
          "isEdee",
          false
        ],
        [
          "gold_colors",
          "isEder",
          false
        ],
        [
          "gold_colors",
          "object",
          false
        ],
        [
          "gold_colors",
          "property",
          false
        ],
        [
          "gold_colors",
          "queryable",
          false
        ],
        [
          "gold_colors",
          "theAble",
          false
        ],
        [
          "gold_colors",
          "yellow_colors",
          false
        ],
        [
          "gray_colors",
          "color_colors",
          false
        ],
        [
          "gray_colors",
          "hierarchyAble",
          false
        ],
        [
          "gray_colors",
          "isEdee",
          false
        ],
        [
          "gray_colors",
          "isEder",
          false
        ],
        [
          "gray_colors",
          "object",
          false
        ],
        [
          "gray_colors",
          "property",
          false
        ],
        [
          "gray_colors",
          "queryable",
          false
        ],
        [
          "gray_colors",
          "theAble",
          false
        ],
        [
          "green_colors",
          "color_colors",
          false
        ],
        [
          "green_colors",
          "hierarchyAble",
          false
        ],
        [
          "green_colors",
          "isEdee",
          false
        ],
        [
          "green_colors",
          "isEder",
          false
        ],
        [
          "green_colors",
          "object",
          false
        ],
        [
          "green_colors",
          "property",
          false
        ],
        [
          "green_colors",
          "queryable",
          false
        ],
        [
          "green_colors",
          "theAble",
          false
        ],
        [
          "have",
          "canBeDoQuestion",
          false
        ],
        [
          "have",
          "canBeQuestion",
          false
        ],
        [
          "hex_colors",
          "color_colors_modifier",
          false
        ],
        [
          "hex_colors",
          "hierarchyAble",
          false
        ],
        [
          "hex_colors",
          "isEdee",
          false
        ],
        [
          "hex_colors",
          "isEder",
          false
        ],
        [
          "hex_colors",
          "object",
          false
        ],
        [
          "hex_colors",
          "property",
          false
        ],
        [
          "hex_colors",
          "queryable",
          false
        ],
        [
          "hex_colors",
          "theAble",
          false
        ],
        [
          "hex_colors_color_colors",
          "adjective",
          true
        ],
        [
          "hex_colors_color_colors",
          "color_colors",
          false
        ],
        [
          "hex_colors_color_colors",
          "concept",
          false
        ],
        [
          "hex_colors_color_colors",
          "hierarchyAble",
          false
        ],
        [
          "hex_colors_color_colors",
          "isEdee",
          false
        ],
        [
          "hex_colors_color_colors",
          "isEder",
          false
        ],
        [
          "hex_colors_color_colors",
          "object",
          false
        ],
        [
          "hex_colors_color_colors",
          "property",
          false
        ],
        [
          "hex_colors_color_colors",
          "queryable",
          false
        ],
        [
          "hex_colors_color_colors",
          "theAble",
          false
        ],
        [
          "hierarchyAble",
          "queryable",
          false
        ],
        [
          "ifAble",
          "ifAble",
          false
        ],
        [
          "indigo_colors",
          "hierarchyAble",
          false
        ],
        [
          "indigo_colors",
          "isEdee",
          false
        ],
        [
          "indigo_colors",
          "isEder",
          false
        ],
        [
          "indigo_colors",
          "object",
          false
        ],
        [
          "indigo_colors",
          "property",
          false
        ],
        [
          "indigo_colors",
          "purple_colors",
          false
        ],
        [
          "indigo_colors",
          "queryable",
          false
        ],
        [
          "indigo_colors",
          "theAble",
          false
        ],
        [
          "is",
          "canBeQuestion",
          false
        ],
        [
          "is",
          "verby",
          false
        ],
        [
          "isEdee",
          "isEdee",
          false
        ],
        [
          "isEder",
          "isEder",
          false
        ],
        [
          "it",
          "pronoun",
          false
        ],
        [
          "it",
          "queryable",
          false
        ],
        [
          "it",
          "thisitthat",
          false
        ],
        [
          "it",
          "toAble",
          false
        ],
        [
          "ivory_colors",
          "hierarchyAble",
          false
        ],
        [
          "ivory_colors",
          "isEdee",
          false
        ],
        [
          "ivory_colors",
          "isEder",
          false
        ],
        [
          "ivory_colors",
          "object",
          false
        ],
        [
          "ivory_colors",
          "property",
          false
        ],
        [
          "ivory_colors",
          "queryable",
          false
        ],
        [
          "ivory_colors",
          "theAble",
          false
        ],
        [
          "ivory_colors",
          "white_colors",
          false
        ],
        [
          "khaki_colors",
          "hierarchyAble",
          false
        ],
        [
          "khaki_colors",
          "isEdee",
          false
        ],
        [
          "khaki_colors",
          "isEder",
          false
        ],
        [
          "khaki_colors",
          "object",
          false
        ],
        [
          "khaki_colors",
          "property",
          false
        ],
        [
          "khaki_colors",
          "queryable",
          false
        ],
        [
          "khaki_colors",
          "theAble",
          false
        ],
        [
          "khaki_colors",
          "yellow_colors",
          false
        ],
        [
          "lavender_colors",
          "hierarchyAble",
          false
        ],
        [
          "lavender_colors",
          "isEdee",
          false
        ],
        [
          "lavender_colors",
          "isEder",
          false
        ],
        [
          "lavender_colors",
          "object",
          false
        ],
        [
          "lavender_colors",
          "property",
          false
        ],
        [
          "lavender_colors",
          "purple_colors",
          false
        ],
        [
          "lavender_colors",
          "queryable",
          false
        ],
        [
          "lavender_colors",
          "theAble",
          false
        ],
        [
          "light_colors",
          "brightness_colors",
          false
        ],
        [
          "light_colors",
          "hierarchyAble",
          false
        ],
        [
          "light_colors",
          "isEdee",
          false
        ],
        [
          "light_colors",
          "isEder",
          false
        ],
        [
          "light_colors",
          "object",
          false
        ],
        [
          "light_colors",
          "property",
          false
        ],
        [
          "light_colors",
          "queryable",
          false
        ],
        [
          "light_colors",
          "theAble",
          false
        ],
        [
          "lime_colors",
          "green_colors",
          false
        ],
        [
          "lime_colors",
          "hierarchyAble",
          false
        ],
        [
          "lime_colors",
          "isEdee",
          false
        ],
        [
          "lime_colors",
          "isEder",
          false
        ],
        [
          "lime_colors",
          "object",
          false
        ],
        [
          "lime_colors",
          "property",
          false
        ],
        [
          "lime_colors",
          "queryable",
          false
        ],
        [
          "lime_colors",
          "theAble",
          false
        ],
        [
          "magenta_colors",
          "hierarchyAble",
          false
        ],
        [
          "magenta_colors",
          "isEdee",
          false
        ],
        [
          "magenta_colors",
          "isEder",
          false
        ],
        [
          "magenta_colors",
          "object",
          false
        ],
        [
          "magenta_colors",
          "property",
          false
        ],
        [
          "magenta_colors",
          "purple_colors",
          false
        ],
        [
          "magenta_colors",
          "queryable",
          false
        ],
        [
          "magenta_colors",
          "theAble",
          false
        ],
        [
          "maroon_colors",
          "brown_colors",
          false
        ],
        [
          "maroon_colors",
          "hierarchyAble",
          false
        ],
        [
          "maroon_colors",
          "isEdee",
          false
        ],
        [
          "maroon_colors",
          "isEder",
          false
        ],
        [
          "maroon_colors",
          "object",
          false
        ],
        [
          "maroon_colors",
          "property",
          false
        ],
        [
          "maroon_colors",
          "queryable",
          false
        ],
        [
          "maroon_colors",
          "theAble",
          false
        ],
        [
          "modifies",
          "verby",
          false
        ],
        [
          "navy_colors",
          "blue_colors",
          false
        ],
        [
          "navy_colors",
          "hierarchyAble",
          false
        ],
        [
          "navy_colors",
          "isEdee",
          false
        ],
        [
          "navy_colors",
          "isEder",
          false
        ],
        [
          "navy_colors",
          "object",
          false
        ],
        [
          "navy_colors",
          "property",
          false
        ],
        [
          "navy_colors",
          "queryable",
          false
        ],
        [
          "navy_colors",
          "theAble",
          false
        ],
        [
          "noun",
          "theAble",
          false
        ],
        [
          "object",
          "queryable",
          false
        ],
        [
          "object",
          "theAble",
          false
        ],
        [
          "olive_colors",
          "green_colors",
          false
        ],
        [
          "olive_colors",
          "hierarchyAble",
          false
        ],
        [
          "olive_colors",
          "isEdee",
          false
        ],
        [
          "olive_colors",
          "isEder",
          false
        ],
        [
          "olive_colors",
          "object",
          false
        ],
        [
          "olive_colors",
          "property",
          false
        ],
        [
          "olive_colors",
          "queryable",
          false
        ],
        [
          "olive_colors",
          "theAble",
          false
        ],
        [
          "orAble",
          "ifAble",
          false
        ],
        [
          "orange_colors",
          "color_colors",
          false
        ],
        [
          "orange_colors",
          "hierarchyAble",
          false
        ],
        [
          "orange_colors",
          "isEdee",
          false
        ],
        [
          "orange_colors",
          "isEder",
          false
        ],
        [
          "orange_colors",
          "object",
          false
        ],
        [
          "orange_colors",
          "property",
          false
        ],
        [
          "orange_colors",
          "queryable",
          false
        ],
        [
          "orange_colors",
          "theAble",
          false
        ],
        [
          "pink_colors",
          "color_colors",
          false
        ],
        [
          "pink_colors",
          "hierarchyAble",
          false
        ],
        [
          "pink_colors",
          "isEdee",
          false
        ],
        [
          "pink_colors",
          "isEder",
          false
        ],
        [
          "pink_colors",
          "object",
          false
        ],
        [
          "pink_colors",
          "property",
          false
        ],
        [
          "pink_colors",
          "queryable",
          false
        ],
        [
          "pink_colors",
          "theAble",
          false
        ],
        [
          "preposition",
          "preposition",
          false
        ],
        [
          "pronoun",
          "pronoun",
          false
        ],
        [
          "property",
          "queryable",
          false
        ],
        [
          "property",
          "theAble",
          false
        ],
        [
          "property",
          "unknown",
          false
        ],
        [
          "punctuation",
          "punctuation",
          false
        ],
        [
          "purple_colors",
          "color_colors",
          false
        ],
        [
          "purple_colors",
          "hierarchyAble",
          false
        ],
        [
          "purple_colors",
          "isEdee",
          false
        ],
        [
          "purple_colors",
          "isEder",
          false
        ],
        [
          "purple_colors",
          "object",
          false
        ],
        [
          "purple_colors",
          "property",
          false
        ],
        [
          "purple_colors",
          "queryable",
          false
        ],
        [
          "purple_colors",
          "theAble",
          false
        ],
        [
          "queryable",
          "queryable",
          false
        ],
        [
          "questionMark",
          "punctuation",
          false
        ],
        [
          "readonly",
          "queryable",
          false
        ],
        [
          "reason",
          "queryable",
          false
        ],
        [
          "reason",
          "theAble",
          false
        ],
        [
          "red_colors",
          "color_colors",
          false
        ],
        [
          "red_colors",
          "hierarchyAble",
          false
        ],
        [
          "red_colors",
          "isEdee",
          false
        ],
        [
          "red_colors",
          "isEder",
          false
        ],
        [
          "red_colors",
          "object",
          false
        ],
        [
          "red_colors",
          "property",
          false
        ],
        [
          "red_colors",
          "queryable",
          false
        ],
        [
          "red_colors",
          "theAble",
          false
        ],
        [
          "sienna_colors",
          "brown_colors",
          false
        ],
        [
          "sienna_colors",
          "hierarchyAble",
          false
        ],
        [
          "sienna_colors",
          "isEdee",
          false
        ],
        [
          "sienna_colors",
          "isEder",
          false
        ],
        [
          "sienna_colors",
          "object",
          false
        ],
        [
          "sienna_colors",
          "property",
          false
        ],
        [
          "sienna_colors",
          "queryable",
          false
        ],
        [
          "sienna_colors",
          "theAble",
          false
        ],
        [
          "silver_colors",
          "gray_colors",
          false
        ],
        [
          "silver_colors",
          "hierarchyAble",
          false
        ],
        [
          "silver_colors",
          "isEdee",
          false
        ],
        [
          "silver_colors",
          "isEder",
          false
        ],
        [
          "silver_colors",
          "object",
          false
        ],
        [
          "silver_colors",
          "property",
          false
        ],
        [
          "silver_colors",
          "queryable",
          false
        ],
        [
          "silver_colors",
          "theAble",
          false
        ],
        [
          "snow_colors",
          "hierarchyAble",
          false
        ],
        [
          "snow_colors",
          "isEdee",
          false
        ],
        [
          "snow_colors",
          "isEder",
          false
        ],
        [
          "snow_colors",
          "object",
          false
        ],
        [
          "snow_colors",
          "property",
          false
        ],
        [
          "snow_colors",
          "queryable",
          false
        ],
        [
          "snow_colors",
          "theAble",
          false
        ],
        [
          "snow_colors",
          "white_colors",
          false
        ],
        [
          "tan_colors",
          "brown_colors",
          false
        ],
        [
          "tan_colors",
          "hierarchyAble",
          false
        ],
        [
          "tan_colors",
          "isEdee",
          false
        ],
        [
          "tan_colors",
          "isEder",
          false
        ],
        [
          "tan_colors",
          "object",
          false
        ],
        [
          "tan_colors",
          "property",
          false
        ],
        [
          "tan_colors",
          "queryable",
          false
        ],
        [
          "tan_colors",
          "theAble",
          false
        ],
        [
          "teal_colors",
          "green_colors",
          false
        ],
        [
          "teal_colors",
          "hierarchyAble",
          false
        ],
        [
          "teal_colors",
          "isEdee",
          false
        ],
        [
          "teal_colors",
          "isEder",
          false
        ],
        [
          "teal_colors",
          "object",
          false
        ],
        [
          "teal_colors",
          "property",
          false
        ],
        [
          "teal_colors",
          "queryable",
          false
        ],
        [
          "teal_colors",
          "theAble",
          false
        ],
        [
          "that",
          "thisitthat",
          false
        ],
        [
          "the",
          "articlePOS",
          false
        ],
        [
          "theAble",
          "theAble",
          false
        ],
        [
          "this",
          "pronoun",
          false
        ],
        [
          "this",
          "queryable",
          false
        ],
        [
          "this",
          "thisitthat",
          false
        ],
        [
          "thisitthat",
          "queryable",
          false
        ],
        [
          "to",
          "preposition",
          false
        ],
        [
          "toAble",
          "toAble",
          false
        ],
        [
          "turquoise_colors",
          "blue_colors",
          false
        ],
        [
          "turquoise_colors",
          "hierarchyAble",
          false
        ],
        [
          "turquoise_colors",
          "isEdee",
          false
        ],
        [
          "turquoise_colors",
          "isEder",
          false
        ],
        [
          "turquoise_colors",
          "object",
          false
        ],
        [
          "turquoise_colors",
          "property",
          false
        ],
        [
          "turquoise_colors",
          "queryable",
          false
        ],
        [
          "turquoise_colors",
          "theAble",
          false
        ],
        [
          "type",
          "property",
          false
        ],
        [
          "type",
          "whatAble",
          false
        ],
        [
          "unknown",
          "hierarchyAble",
          false
        ],
        [
          "unknown",
          "object",
          false
        ],
        [
          "unknown",
          "queryable",
          false
        ],
        [
          "unknown",
          "theAble",
          false
        ],
        [
          "verby",
          "verby",
          false
        ],
        [
          "violet_colors",
          "hierarchyAble",
          false
        ],
        [
          "violet_colors",
          "isEdee",
          false
        ],
        [
          "violet_colors",
          "isEder",
          false
        ],
        [
          "violet_colors",
          "object",
          false
        ],
        [
          "violet_colors",
          "property",
          false
        ],
        [
          "violet_colors",
          "purple_colors",
          false
        ],
        [
          "violet_colors",
          "queryable",
          false
        ],
        [
          "violet_colors",
          "theAble",
          false
        ],
        [
          "what",
          "object",
          false
        ],
        [
          "what",
          "queryable",
          false
        ],
        [
          "whatAble",
          "queryable",
          false
        ],
        [
          "white_colors",
          "color_colors",
          false
        ],
        [
          "white_colors",
          "hierarchyAble",
          false
        ],
        [
          "white_colors",
          "isEdee",
          false
        ],
        [
          "white_colors",
          "isEder",
          false
        ],
        [
          "white_colors",
          "object",
          false
        ],
        [
          "white_colors",
          "property",
          false
        ],
        [
          "white_colors",
          "queryable",
          false
        ],
        [
          "white_colors",
          "theAble",
          false
        ],
        [
          "whose",
          "object",
          false
        ],
        [
          "xfx",
          "queryable",
          false
        ],
        [
          "yellow_colors",
          "color_colors",
          false
        ],
        [
          "yellow_colors",
          "hierarchyAble",
          false
        ],
        [
          "yellow_colors",
          "isEdee",
          false
        ],
        [
          "yellow_colors",
          "isEder",
          false
        ],
        [
          "yellow_colors",
          "object",
          false
        ],
        [
          "yellow_colors",
          "property",
          false
        ],
        [
          "yellow_colors",
          "queryable",
          false
        ],
        [
          "yellow_colors",
          "theAble",
          false
        ]
      ],
      "metadata": {
        "opChoices": [
          {
            "op": [
              "unknown",
              0
            ],
            "ops": [
              [
                "unknown",
                0
              ],
              [
                "is",
                0
              ],
              [
                "a",
                0
              ],
              [
                "concept",
                0
              ]
            ],
            "counter": 1
          },
          {
            "op": [
              "concept",
              0
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "a",
                0
              ],
              [
                "concept",
                0
              ]
            ],
            "counter": 2
          },
          {
            "op": [
              "a",
              0
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "a",
                0
              ]
            ],
            "counter": 3
          },
          {
            "op": [
              "is",
              0
            ],
            "ops": [
              [
                "is",
                0
              ]
            ],
            "counter": 4
          },
          {
            "op": [
              "is",
              1
            ],
            "ops": [
              [
                "is",
                1
              ]
            ],
            "counter": 5
          }
        ]
      },
      "trace": "\n\n>>>>>>>>>>>>> Counter 1\n    0. unknown/0  (1, 0) - \"reportable\"\n                                   {\n                                     marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 0, 'end': 9}\n                                     text: \"reportable\"\n                                     unknown: true\n                                     value: \"reportable\"\n                                     word: \"reportable\"\n                                   }\n    1. is/0  (1, 3) - \"is\"\n                                   {\n                                     marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                     number: \"one\"\n                                     range: {'start': 11, 'end': 12}\n                                     text: \"is\"\n                                     word: \"is\"\n                                   }\n    2. a/0  (1, 6) - \"a\"\n                                   {\n                                     default: true\n                                     marker: Operator(a/0, PASS, [\"Selector(Bridge('{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: operator, modifiers: append(['determiner'], after[0].modifiers) }'), , []<==>[Type('theAble')], bridge(bridge), passthrough)\"], evaluator(Bridge('{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: operator, modifiers: append(['determiner'], after[0].modifiers) }')), variables({}) bridge(bridge))\n                                     range: {'start': 14, 'end': 14}\n                                     text: \"a\"\n                                     word: \"a\"\n                                   }\n    3. concept/0  (1, 10) - \"concept\"\n                                   {\n                                     default: true\n                                     marker: Operator(concept/0, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 16, 'end': 22}\n                                     text: \"concept\"\n                                     value: \"concept\"\n                                     word: \"concept\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=0) is Context({marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 9}, text: reportable, unknown: True, value: reportable, word: reportable})\n\n>>>>>>>>>>>>> Counter 2\n   *0. unknown/1 (dead) (2, 0) - \"reportable\"\n                                   {\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 0, 'end': 9}\n                                     text: \"reportable\"\n                                     unknown: true\n                                     value: \"reportable\"\n                                     word: \"reportable\"\n                                   }\n    1. is/0  (1, 3) - \"is\"\n                                   {\n                                     marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                     number: \"one\"\n                                     range: {'start': 11, 'end': 12}\n                                     text: \"is\"\n                                     word: \"is\"\n                                   }\n    2. a/0  (1, 6) - \"a\"\n                                   {\n                                     default: true\n                                     marker: Operator(a/0, PASS, [\"Selector(Bridge('{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: operator, modifiers: append(['determiner'], after[0].modifiers) }'), , []<==>[Type('theAble')], bridge(bridge), passthrough)\"], evaluator(Bridge('{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: operator, modifiers: append(['determiner'], after[0].modifiers) }')), variables({}) bridge(bridge))\n                                     range: {'start': 14, 'end': 14}\n                                     text: \"a\"\n                                     word: \"a\"\n                                   }\n    3. concept/0  (1, 10) - \"concept\"\n                                   {\n                                     default: true\n                                     marker: Operator(concept/0, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 16, 'end': 22}\n                                     text: \"concept\"\n                                     value: \"concept\"\n                                     word: \"concept\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=3) is Context({default: True, marker: Operator(concept/0, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 16, 'end': 22}, text: concept, value: concept, word: concept})\n\n>>>>>>>>>>>>> Counter 3\n    0. unknown/1 (dead) (2, 0) - \"reportable\"\n                                   {\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 0, 'end': 9}\n                                     text: \"reportable\"\n                                     unknown: true\n                                     value: \"reportable\"\n                                     word: \"reportable\"\n                                   }\n    1. is/0  (1, 3) - \"is\"\n                                   {\n                                     marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                     number: \"one\"\n                                     range: {'start': 11, 'end': 12}\n                                     text: \"is\"\n                                     word: \"is\"\n                                   }\n    2. a/0  (1, 6) - \"a\"\n                                   {\n                                     default: true\n                                     marker: Operator(a/0, PASS, [\"Selector(Bridge('{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: operator, modifiers: append(['determiner'], after[0].modifiers) }'), , []<==>[Type('theAble')], bridge(bridge), passthrough)\"], evaluator(Bridge('{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: operator, modifiers: append(['determiner'], after[0].modifiers) }')), variables({}) bridge(bridge))\n                                     range: {'start': 14, 'end': 14}\n                                     text: \"a\"\n                                     word: \"a\"\n                                   }\n   *3. concept/1 (dead) (2, 1) - \"concept\"\n                                   {\n                                     dead: true\n                                     default: true\n                                     marker: Operator(concept/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                     range: {'start': 16, 'end': 22}\n                                     text: \"concept\"\n                                     value: \"concept\"\n                                     word: \"concept\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=2) is Context({default: True, marker: Operator(a/0, PASS, [\"Selector(Bridge('{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: operator, modifiers: append(['determiner'], after[0].modifiers) }'), , []<==>[Type('theAble')], bridge(bridge), passthrough)\"], evaluator(Bridge('{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: operator, modifiers: append(['determiner'], after[0].modifiers) }')), variables({}) bridge(bridge)), range: {'start': 14, 'end': 14}, text: a, word: a})\n\n>>>>>>>>>>>>> Counter 4\n    0. unknown/1 (dead) (2, 0) - \"reportable\"\n                                   {\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 0, 'end': 9}\n                                     text: \"reportable\"\n                                     unknown: true\n                                     value: \"reportable\"\n                                     word: \"reportable\"\n                                   }\n    1. is/0  (1, 3) - \"is\"\n                                   {\n                                     marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge))\n                                     number: \"one\"\n                                     range: {'start': 11, 'end': 12}\n                                     text: \"is\"\n                                     word: \"is\"\n                                   }\n   *2. concept/1 (dead) (3, 0) - \"a concept\"\n                                   {\n                                     concept: true\n                                     dead: true\n                                     default: true\n                                     determiner:                                          {\n                                           default: true\n                                           marker: Operator(a/0, PASS, [\"Selector(Bridge('{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: operator, modifiers: append(['determiner'], after[0].modifiers) }'), , []<==>[Type('theAble')], bridge(bridge), passthrough)\"], evaluator(Bridge('{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: operator, modifiers: append(['determiner'], after[0].modifiers) }')), variables({}) bridge(bridge))\n                                           range: {'start': 14, 'end': 14}\n                                           text: \"a\"\n                                           word: \"a\"\n                                         }\n\n                                     marker: Operator(concept/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                     modifiers: [\n                                     'determiner'\n                                     ]\n                                     number: \"one\"\n                                     pullFromContext: false\n                                     range: {'start': 14, 'end': 22}\n                                     text: \"a concept\"\n                                     types: [\n                                     'concept'\n                                     ]\n                                     value: \"concept\"\n                                     wantsValue: true\n                                     word: \"concept\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=1) is Context({marker: Operator(is/0, [\"Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), , []<==>[Type('queryable'), Type('queryable')], bridge(queryBridge))\", \"Selector(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }'), , [Type('queryable')]<==>[Type('queryable')], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: one, range: {'start': 11, 'end': 12}, text: is, word: is})\n\n>>>>>>>>>>>>> Counter 5\n   *0. is/1  (4, 0) - \"reportable is a concept\"\n                                   {\n                                     marker: Operator(is/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     number: \"one\"\n                                     one:                                          {\n                                           dead: true\n                                           marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                           number: \"one\"\n                                           range: {'start': 0, 'end': 22}\n                                           text: \"reportable\"\n                                           types: [\n                                           'unknown'\n                                           ]\n                                           unknown: true\n                                           value: \"reportable\"\n                                           word: \"reportable\"\n                                         }\n\n                                     range: {'start': 0, 'end': 22}\n                                     text: \"reportable is a concept\"\n                                     two:                                          {\n                                           concept: true\n                                           dead: true\n                                           default: true\n                                           determiner:                                                {\n                                                 default: true\n                                                 marker: Operator(a/0, PASS, [\"Selector(Bridge('{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: operator, modifiers: append(['determiner'], after[0].modifiers) }'), , []<==>[Type('theAble')], bridge(bridge), passthrough)\"], evaluator(Bridge('{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: operator, modifiers: append(['determiner'], after[0].modifiers) }')), variables({}) bridge(bridge))\n                                                 range: {'start': 14, 'end': 14}\n                                                 text: \"a\"\n                                                 word: \"a\"\n                                               }\n\n                                           marker: Operator(concept/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                           modifiers: [\n                                           'determiner'\n                                           ]\n                                           number: \"one\"\n                                           pullFromContext: false\n                                           range: {'start': 14, 'end': 22}\n                                           text: \"a concept\"\n                                           types: [\n                                           'concept'\n                                           ]\n                                           value: \"concept\"\n                                           wantsValue: true\n                                           word: \"concept\"\n                                         }\n\n                                     word: \"is\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=0) is Context({marker: Operator(is/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: one, one: Context({dead: True, marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: one, range: {'start': 0, 'end': 22}, text: reportable, types: ['unknown'], unknown: True, value: reportable, word: reportable}), range: {'start': 0, 'end': 22}, text: reportable is a concept, two: Context({concept: True, dead: True, default: True, determiner: Context({default: True, marker: Operator(a/0, PASS, [\"Selector(Bridge('{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: operator, modifiers: append(['determiner'], after[0].modifiers) }'), , []<==>[Type('theAble')], bridge(bridge), passthrough)\"], evaluator(Bridge('{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: operator, modifiers: append(['determiner'], after[0].modifiers) }')), variables({}) bridge(bridge)), range: {'start': 14, 'end': 14}, text: a, word: a}), marker: Operator(concept/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge)), modifiers: ['determiner'], number: one, pullFromContext: False, range: {'start': 14, 'end': 22}, text: a concept, types: ['concept'], value: concept, wantsValue: True, word: concept}), word: is})\n\n>>>>>>>>>>>>> Counter 6\n   *0. is/2 (dead) (5, 0) - \"reportable is a concept\"\n                                   {\n                                     dead: true\n                                     marker: Operator(is/2, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                     number: \"one\"\n                                     one:                                          {\n                                           dead: true\n                                           marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                           number: \"one\"\n                                           range: {'start': 0, 'end': 22}\n                                           text: \"reportable\"\n                                           types: [\n                                           'unknown'\n                                           ]\n                                           unknown: true\n                                           value: \"reportable\"\n                                           word: \"reportable\"\n                                         }\n\n                                     range: {'start': 0, 'end': 22}\n                                     text: \"reportable is a concept\"\n                                     two:                                          {\n                                           concept: true\n                                           dead: true\n                                           default: true\n                                           determiner:                                                {\n                                                 default: true\n                                                 marker: Operator(a/0, PASS, [\"Selector(Bridge('{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: operator, modifiers: append(['determiner'], after[0].modifiers) }'), , []<==>[Type('theAble')], bridge(bridge), passthrough)\"], evaluator(Bridge('{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: operator, modifiers: append(['determiner'], after[0].modifiers) }')), variables({}) bridge(bridge))\n                                                 range: {'start': 14, 'end': 14}\n                                                 text: \"a\"\n                                                 word: \"a\"\n                                               }\n\n                                           marker: Operator(concept/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                           modifiers: [\n                                           'determiner'\n                                           ]\n                                           number: \"one\"\n                                           pullFromContext: false\n                                           range: {'start': 14, 'end': 22}\n                                           text: \"a concept\"\n                                           types: [\n                                           'concept'\n                                           ]\n                                           value: \"concept\"\n                                           wantsValue: true\n                                           word: \"concept\"\n                                         }\n\n                                     word: \"is\"\n                                   }\n<<<<<<<<<<<<<\n",
      "contexts": [
        {
          "number": "one",
          "text": "reportable is a concept",
          "marker": "is",
          "word": "is",
          "range": {
            "start": 0,
            "end": 22
          },
          "one": {
            "number": "one",
            "value": "reportable",
            "unknown": true,
            "text": "reportable",
            "marker": "unknown",
            "word": "reportable",
            "range": {
              "start": 0,
              "end": 22
            },
            "dead": true,
            "types": [
              "unknown"
            ],
            "level": 1
          },
          "two": {
            "marker": "concept",
            "value": "concept",
            "default": true,
            "text": "a concept",
            "word": "concept",
            "range": {
              "start": 14,
              "end": 22
            },
            "dead": true,
            "types": [
              "concept"
            ],
            "pullFromContext": false,
            "concept": true,
            "number": "one",
            "wantsValue": true,
            "determiner": {
              "marker": "a",
              "default": true,
              "word": "a",
              "text": "a",
              "range": {
                "start": 14,
                "end": 14
              },
              "level": 0
            },
            "modifiers": [
              "determiner"
            ],
            "level": 1
          },
          "dead": true,
          "level": 2,
          "topLevel": true,
          "touchedBy": [
            "mongo#call2",
            "instance0#mongo#call2"
          ]
        }
      ],
      "generated": [
        ""
      ],
      "paraphrases": [
        "reportable is a concept"
      ],
      "paraphrasesParenthesized": [],
      "generatedParenthesized": [],
      "responses": [
        ""
      ],
      "associations": [
        [
          [
            "a",
            0
          ],
          [
            "concept",
            0
          ],
          [
            "is",
            0
          ],
          [
            "unknown",
            0
          ]
        ],
        [
          [
            "a",
            0
          ],
          [
            "concept",
            0
          ],
          [
            "is",
            0
          ],
          [
            "unknown",
            1
          ]
        ],
        [
          [
            "a",
            0
          ],
          [
            "is",
            0
          ],
          [
            "unknown",
            1
          ]
        ],
        [
          [
            "is",
            0
          ],
          [
            "unknown",
            1
          ]
        ]
      ],
      "learned_contextual_priorities": [],
      "query": "reportable is a concept",
      "key": {
        "query": "reportable is a concept"
      }
    },
    {
      "extraConfig": true,
      "operators": [
        "([user|])"
      ],
      "bridges": [
        {
          "id": "user",
          "parents": [
            "theAble",
            "reportable"
          ],
          "words": [
            {
              "word": "user",
              "number": "one",
              "database": "sample_mflix",
              "collection": "users",
              "path": [
                "name"
              ]
            },
            {
              "word": "users",
              "number": "many",
              "database": "sample_mflix",
              "collection": "users",
              "path": [
                "name"
              ]
            }
          ]
        }
      ]
    },
    {
      "hierarchy": [
        [
          "a",
          "articlePOS",
          false
        ],
        [
          "adjective",
          "adjective",
          false
        ],
        [
          "aqua_colors",
          "blue_colors",
          false
        ],
        [
          "aqua_colors",
          "hierarchyAble",
          false
        ],
        [
          "aqua_colors",
          "isEdee",
          false
        ],
        [
          "aqua_colors",
          "isEder",
          false
        ],
        [
          "aqua_colors",
          "object",
          false
        ],
        [
          "aqua_colors",
          "property",
          false
        ],
        [
          "aqua_colors",
          "queryable",
          false
        ],
        [
          "aqua_colors",
          "theAble",
          false
        ],
        [
          "aquamarine_colors",
          "blue_colors",
          false
        ],
        [
          "aquamarine_colors",
          "hierarchyAble",
          false
        ],
        [
          "aquamarine_colors",
          "isEdee",
          false
        ],
        [
          "aquamarine_colors",
          "isEder",
          false
        ],
        [
          "aquamarine_colors",
          "object",
          false
        ],
        [
          "aquamarine_colors",
          "property",
          false
        ],
        [
          "aquamarine_colors",
          "queryable",
          false
        ],
        [
          "aquamarine_colors",
          "theAble",
          false
        ],
        [
          "articlePOS",
          "articlePOS",
          false
        ],
        [
          "azure_colors",
          "hierarchyAble",
          false
        ],
        [
          "azure_colors",
          "isEdee",
          false
        ],
        [
          "azure_colors",
          "isEder",
          false
        ],
        [
          "azure_colors",
          "object",
          false
        ],
        [
          "azure_colors",
          "property",
          false
        ],
        [
          "azure_colors",
          "queryable",
          false
        ],
        [
          "azure_colors",
          "theAble",
          false
        ],
        [
          "azure_colors",
          "white_colors",
          false
        ],
        [
          "beige_colors",
          "hierarchyAble",
          false
        ],
        [
          "beige_colors",
          "isEdee",
          false
        ],
        [
          "beige_colors",
          "isEder",
          false
        ],
        [
          "beige_colors",
          "object",
          false
        ],
        [
          "beige_colors",
          "property",
          false
        ],
        [
          "beige_colors",
          "queryable",
          false
        ],
        [
          "beige_colors",
          "theAble",
          false
        ],
        [
          "beige_colors",
          "white_colors",
          false
        ],
        [
          "between",
          "preposition",
          false
        ],
        [
          "black_colors",
          "gray_colors",
          false
        ],
        [
          "black_colors",
          "hierarchyAble",
          false
        ],
        [
          "black_colors",
          "isEdee",
          false
        ],
        [
          "black_colors",
          "isEder",
          false
        ],
        [
          "black_colors",
          "object",
          false
        ],
        [
          "black_colors",
          "property",
          false
        ],
        [
          "black_colors",
          "queryable",
          false
        ],
        [
          "black_colors",
          "theAble",
          false
        ],
        [
          "blue_colors",
          "color_colors",
          false
        ],
        [
          "blue_colors",
          "hierarchyAble",
          false
        ],
        [
          "blue_colors",
          "isEdee",
          false
        ],
        [
          "blue_colors",
          "isEder",
          false
        ],
        [
          "blue_colors",
          "object",
          false
        ],
        [
          "blue_colors",
          "property",
          false
        ],
        [
          "blue_colors",
          "queryable",
          false
        ],
        [
          "blue_colors",
          "theAble",
          false
        ],
        [
          "brightness_colors",
          "color_colors_modifier",
          false
        ],
        [
          "brightness_colors",
          "hierarchyAble",
          false
        ],
        [
          "brightness_colors",
          "isEdee",
          false
        ],
        [
          "brightness_colors",
          "isEder",
          false
        ],
        [
          "brightness_colors",
          "object",
          false
        ],
        [
          "brightness_colors",
          "property",
          false
        ],
        [
          "brightness_colors",
          "queryable",
          false
        ],
        [
          "brightness_colors",
          "theAble",
          false
        ],
        [
          "brightness_colors_color_colors",
          "adjective",
          true
        ],
        [
          "brightness_colors_color_colors",
          "color_colors",
          false
        ],
        [
          "brightness_colors_color_colors",
          "concept",
          false
        ],
        [
          "brightness_colors_color_colors",
          "hierarchyAble",
          false
        ],
        [
          "brightness_colors_color_colors",
          "isEdee",
          false
        ],
        [
          "brightness_colors_color_colors",
          "isEder",
          false
        ],
        [
          "brightness_colors_color_colors",
          "object",
          false
        ],
        [
          "brightness_colors_color_colors",
          "property",
          false
        ],
        [
          "brightness_colors_color_colors",
          "queryable",
          false
        ],
        [
          "brightness_colors_color_colors",
          "theAble",
          false
        ],
        [
          "brown_colors",
          "color_colors",
          false
        ],
        [
          "brown_colors",
          "hierarchyAble",
          false
        ],
        [
          "brown_colors",
          "isEdee",
          false
        ],
        [
          "brown_colors",
          "isEder",
          false
        ],
        [
          "brown_colors",
          "object",
          false
        ],
        [
          "brown_colors",
          "property",
          false
        ],
        [
          "brown_colors",
          "queryable",
          false
        ],
        [
          "brown_colors",
          "theAble",
          false
        ],
        [
          "canBeDoQuestion",
          "canBeDoQuestion",
          false
        ],
        [
          "canBeQuestion",
          "canBeQuestion",
          false
        ],
        [
          "chartruese_colors",
          "green_colors",
          false
        ],
        [
          "chartruese_colors",
          "hierarchyAble",
          false
        ],
        [
          "chartruese_colors",
          "isEdee",
          false
        ],
        [
          "chartruese_colors",
          "isEder",
          false
        ],
        [
          "chartruese_colors",
          "object",
          false
        ],
        [
          "chartruese_colors",
          "property",
          false
        ],
        [
          "chartruese_colors",
          "queryable",
          false
        ],
        [
          "chartruese_colors",
          "theAble",
          false
        ],
        [
          "color_colors",
          "concept",
          false
        ],
        [
          "color_colors",
          "hierarchyAble",
          false
        ],
        [
          "color_colors",
          "isEdee",
          false
        ],
        [
          "color_colors",
          "isEder",
          false
        ],
        [
          "color_colors",
          "object",
          false
        ],
        [
          "color_colors",
          "property",
          false
        ],
        [
          "color_colors",
          "queryable",
          false
        ],
        [
          "color_colors",
          "theAble",
          false
        ],
        [
          "color_colors_modifier",
          "color_colors_modifier",
          false
        ],
        [
          "concept",
          "queryable",
          false
        ],
        [
          "concept",
          "theAble",
          false
        ],
        [
          "crimson_colors",
          "hierarchyAble",
          false
        ],
        [
          "crimson_colors",
          "isEdee",
          false
        ],
        [
          "crimson_colors",
          "isEder",
          false
        ],
        [
          "crimson_colors",
          "object",
          false
        ],
        [
          "crimson_colors",
          "property",
          false
        ],
        [
          "crimson_colors",
          "queryable",
          false
        ],
        [
          "crimson_colors",
          "red_colors",
          false
        ],
        [
          "crimson_colors",
          "theAble",
          false
        ],
        [
          "cyan_colors",
          "blue_colors",
          false
        ],
        [
          "cyan_colors",
          "hierarchyAble",
          false
        ],
        [
          "cyan_colors",
          "isEdee",
          false
        ],
        [
          "cyan_colors",
          "isEder",
          false
        ],
        [
          "cyan_colors",
          "object",
          false
        ],
        [
          "cyan_colors",
          "property",
          false
        ],
        [
          "cyan_colors",
          "queryable",
          false
        ],
        [
          "cyan_colors",
          "theAble",
          false
        ],
        [
          "dark_colors",
          "brightness_colors",
          false
        ],
        [
          "dark_colors",
          "hierarchyAble",
          false
        ],
        [
          "dark_colors",
          "isEdee",
          false
        ],
        [
          "dark_colors",
          "isEder",
          false
        ],
        [
          "dark_colors",
          "object",
          false
        ],
        [
          "dark_colors",
          "property",
          false
        ],
        [
          "dark_colors",
          "queryable",
          false
        ],
        [
          "dark_colors",
          "theAble",
          false
        ],
        [
          "doubleQuote",
          "queryable",
          false
        ],
        [
          "gold_colors",
          "hierarchyAble",
          false
        ],
        [
          "gold_colors",
          "isEdee",
          false
        ],
        [
          "gold_colors",
          "isEder",
          false
        ],
        [
          "gold_colors",
          "object",
          false
        ],
        [
          "gold_colors",
          "property",
          false
        ],
        [
          "gold_colors",
          "queryable",
          false
        ],
        [
          "gold_colors",
          "theAble",
          false
        ],
        [
          "gold_colors",
          "yellow_colors",
          false
        ],
        [
          "gray_colors",
          "color_colors",
          false
        ],
        [
          "gray_colors",
          "hierarchyAble",
          false
        ],
        [
          "gray_colors",
          "isEdee",
          false
        ],
        [
          "gray_colors",
          "isEder",
          false
        ],
        [
          "gray_colors",
          "object",
          false
        ],
        [
          "gray_colors",
          "property",
          false
        ],
        [
          "gray_colors",
          "queryable",
          false
        ],
        [
          "gray_colors",
          "theAble",
          false
        ],
        [
          "green_colors",
          "color_colors",
          false
        ],
        [
          "green_colors",
          "hierarchyAble",
          false
        ],
        [
          "green_colors",
          "isEdee",
          false
        ],
        [
          "green_colors",
          "isEder",
          false
        ],
        [
          "green_colors",
          "object",
          false
        ],
        [
          "green_colors",
          "property",
          false
        ],
        [
          "green_colors",
          "queryable",
          false
        ],
        [
          "green_colors",
          "theAble",
          false
        ],
        [
          "have",
          "canBeDoQuestion",
          false
        ],
        [
          "have",
          "canBeQuestion",
          false
        ],
        [
          "hex_colors",
          "color_colors_modifier",
          false
        ],
        [
          "hex_colors",
          "hierarchyAble",
          false
        ],
        [
          "hex_colors",
          "isEdee",
          false
        ],
        [
          "hex_colors",
          "isEder",
          false
        ],
        [
          "hex_colors",
          "object",
          false
        ],
        [
          "hex_colors",
          "property",
          false
        ],
        [
          "hex_colors",
          "queryable",
          false
        ],
        [
          "hex_colors",
          "theAble",
          false
        ],
        [
          "hex_colors_color_colors",
          "adjective",
          true
        ],
        [
          "hex_colors_color_colors",
          "color_colors",
          false
        ],
        [
          "hex_colors_color_colors",
          "concept",
          false
        ],
        [
          "hex_colors_color_colors",
          "hierarchyAble",
          false
        ],
        [
          "hex_colors_color_colors",
          "isEdee",
          false
        ],
        [
          "hex_colors_color_colors",
          "isEder",
          false
        ],
        [
          "hex_colors_color_colors",
          "object",
          false
        ],
        [
          "hex_colors_color_colors",
          "property",
          false
        ],
        [
          "hex_colors_color_colors",
          "queryable",
          false
        ],
        [
          "hex_colors_color_colors",
          "theAble",
          false
        ],
        [
          "hierarchyAble",
          "queryable",
          false
        ],
        [
          "ifAble",
          "ifAble",
          false
        ],
        [
          "indigo_colors",
          "hierarchyAble",
          false
        ],
        [
          "indigo_colors",
          "isEdee",
          false
        ],
        [
          "indigo_colors",
          "isEder",
          false
        ],
        [
          "indigo_colors",
          "object",
          false
        ],
        [
          "indigo_colors",
          "property",
          false
        ],
        [
          "indigo_colors",
          "purple_colors",
          false
        ],
        [
          "indigo_colors",
          "queryable",
          false
        ],
        [
          "indigo_colors",
          "theAble",
          false
        ],
        [
          "is",
          "canBeQuestion",
          false
        ],
        [
          "is",
          "verby",
          false
        ],
        [
          "isEdee",
          "isEdee",
          false
        ],
        [
          "isEder",
          "isEder",
          false
        ],
        [
          "it",
          "pronoun",
          false
        ],
        [
          "it",
          "queryable",
          false
        ],
        [
          "it",
          "thisitthat",
          false
        ],
        [
          "it",
          "toAble",
          false
        ],
        [
          "ivory_colors",
          "hierarchyAble",
          false
        ],
        [
          "ivory_colors",
          "isEdee",
          false
        ],
        [
          "ivory_colors",
          "isEder",
          false
        ],
        [
          "ivory_colors",
          "object",
          false
        ],
        [
          "ivory_colors",
          "property",
          false
        ],
        [
          "ivory_colors",
          "queryable",
          false
        ],
        [
          "ivory_colors",
          "theAble",
          false
        ],
        [
          "ivory_colors",
          "white_colors",
          false
        ],
        [
          "khaki_colors",
          "hierarchyAble",
          false
        ],
        [
          "khaki_colors",
          "isEdee",
          false
        ],
        [
          "khaki_colors",
          "isEder",
          false
        ],
        [
          "khaki_colors",
          "object",
          false
        ],
        [
          "khaki_colors",
          "property",
          false
        ],
        [
          "khaki_colors",
          "queryable",
          false
        ],
        [
          "khaki_colors",
          "theAble",
          false
        ],
        [
          "khaki_colors",
          "yellow_colors",
          false
        ],
        [
          "lavender_colors",
          "hierarchyAble",
          false
        ],
        [
          "lavender_colors",
          "isEdee",
          false
        ],
        [
          "lavender_colors",
          "isEder",
          false
        ],
        [
          "lavender_colors",
          "object",
          false
        ],
        [
          "lavender_colors",
          "property",
          false
        ],
        [
          "lavender_colors",
          "purple_colors",
          false
        ],
        [
          "lavender_colors",
          "queryable",
          false
        ],
        [
          "lavender_colors",
          "theAble",
          false
        ],
        [
          "light_colors",
          "brightness_colors",
          false
        ],
        [
          "light_colors",
          "hierarchyAble",
          false
        ],
        [
          "light_colors",
          "isEdee",
          false
        ],
        [
          "light_colors",
          "isEder",
          false
        ],
        [
          "light_colors",
          "object",
          false
        ],
        [
          "light_colors",
          "property",
          false
        ],
        [
          "light_colors",
          "queryable",
          false
        ],
        [
          "light_colors",
          "theAble",
          false
        ],
        [
          "lime_colors",
          "green_colors",
          false
        ],
        [
          "lime_colors",
          "hierarchyAble",
          false
        ],
        [
          "lime_colors",
          "isEdee",
          false
        ],
        [
          "lime_colors",
          "isEder",
          false
        ],
        [
          "lime_colors",
          "object",
          false
        ],
        [
          "lime_colors",
          "property",
          false
        ],
        [
          "lime_colors",
          "queryable",
          false
        ],
        [
          "lime_colors",
          "theAble",
          false
        ],
        [
          "magenta_colors",
          "hierarchyAble",
          false
        ],
        [
          "magenta_colors",
          "isEdee",
          false
        ],
        [
          "magenta_colors",
          "isEder",
          false
        ],
        [
          "magenta_colors",
          "object",
          false
        ],
        [
          "magenta_colors",
          "property",
          false
        ],
        [
          "magenta_colors",
          "purple_colors",
          false
        ],
        [
          "magenta_colors",
          "queryable",
          false
        ],
        [
          "magenta_colors",
          "theAble",
          false
        ],
        [
          "maroon_colors",
          "brown_colors",
          false
        ],
        [
          "maroon_colors",
          "hierarchyAble",
          false
        ],
        [
          "maroon_colors",
          "isEdee",
          false
        ],
        [
          "maroon_colors",
          "isEder",
          false
        ],
        [
          "maroon_colors",
          "object",
          false
        ],
        [
          "maroon_colors",
          "property",
          false
        ],
        [
          "maroon_colors",
          "queryable",
          false
        ],
        [
          "maroon_colors",
          "theAble",
          false
        ],
        [
          "modifies",
          "verby",
          false
        ],
        [
          "navy_colors",
          "blue_colors",
          false
        ],
        [
          "navy_colors",
          "hierarchyAble",
          false
        ],
        [
          "navy_colors",
          "isEdee",
          false
        ],
        [
          "navy_colors",
          "isEder",
          false
        ],
        [
          "navy_colors",
          "object",
          false
        ],
        [
          "navy_colors",
          "property",
          false
        ],
        [
          "navy_colors",
          "queryable",
          false
        ],
        [
          "navy_colors",
          "theAble",
          false
        ],
        [
          "noun",
          "theAble",
          false
        ],
        [
          "object",
          "queryable",
          false
        ],
        [
          "object",
          "theAble",
          false
        ],
        [
          "olive_colors",
          "green_colors",
          false
        ],
        [
          "olive_colors",
          "hierarchyAble",
          false
        ],
        [
          "olive_colors",
          "isEdee",
          false
        ],
        [
          "olive_colors",
          "isEder",
          false
        ],
        [
          "olive_colors",
          "object",
          false
        ],
        [
          "olive_colors",
          "property",
          false
        ],
        [
          "olive_colors",
          "queryable",
          false
        ],
        [
          "olive_colors",
          "theAble",
          false
        ],
        [
          "orAble",
          "ifAble",
          false
        ],
        [
          "orange_colors",
          "color_colors",
          false
        ],
        [
          "orange_colors",
          "hierarchyAble",
          false
        ],
        [
          "orange_colors",
          "isEdee",
          false
        ],
        [
          "orange_colors",
          "isEder",
          false
        ],
        [
          "orange_colors",
          "object",
          false
        ],
        [
          "orange_colors",
          "property",
          false
        ],
        [
          "orange_colors",
          "queryable",
          false
        ],
        [
          "orange_colors",
          "theAble",
          false
        ],
        [
          "pink_colors",
          "color_colors",
          false
        ],
        [
          "pink_colors",
          "hierarchyAble",
          false
        ],
        [
          "pink_colors",
          "isEdee",
          false
        ],
        [
          "pink_colors",
          "isEder",
          false
        ],
        [
          "pink_colors",
          "object",
          false
        ],
        [
          "pink_colors",
          "property",
          false
        ],
        [
          "pink_colors",
          "queryable",
          false
        ],
        [
          "pink_colors",
          "theAble",
          false
        ],
        [
          "preposition",
          "preposition",
          false
        ],
        [
          "pronoun",
          "pronoun",
          false
        ],
        [
          "property",
          "queryable",
          false
        ],
        [
          "property",
          "theAble",
          false
        ],
        [
          "property",
          "unknown",
          false
        ],
        [
          "punctuation",
          "punctuation",
          false
        ],
        [
          "purple_colors",
          "color_colors",
          false
        ],
        [
          "purple_colors",
          "hierarchyAble",
          false
        ],
        [
          "purple_colors",
          "isEdee",
          false
        ],
        [
          "purple_colors",
          "isEder",
          false
        ],
        [
          "purple_colors",
          "object",
          false
        ],
        [
          "purple_colors",
          "property",
          false
        ],
        [
          "purple_colors",
          "queryable",
          false
        ],
        [
          "purple_colors",
          "theAble",
          false
        ],
        [
          "queryable",
          "queryable",
          false
        ],
        [
          "questionMark",
          "punctuation",
          false
        ],
        [
          "readonly",
          "queryable",
          false
        ],
        [
          "reason",
          "queryable",
          false
        ],
        [
          "reason",
          "theAble",
          false
        ],
        [
          "red_colors",
          "color_colors",
          false
        ],
        [
          "red_colors",
          "hierarchyAble",
          false
        ],
        [
          "red_colors",
          "isEdee",
          false
        ],
        [
          "red_colors",
          "isEder",
          false
        ],
        [
          "red_colors",
          "object",
          false
        ],
        [
          "red_colors",
          "property",
          false
        ],
        [
          "red_colors",
          "queryable",
          false
        ],
        [
          "red_colors",
          "theAble",
          false
        ],
        [
          "reportable",
          "concept",
          false
        ],
        [
          "reportable",
          "hierarchyAble",
          false
        ],
        [
          "reportable",
          "isEdee",
          false
        ],
        [
          "reportable",
          "isEder",
          false
        ],
        [
          "reportable",
          "object",
          false
        ],
        [
          "reportable",
          "property",
          false
        ],
        [
          "reportable",
          "queryable",
          false
        ],
        [
          "reportable",
          "theAble",
          false
        ],
        [
          "sienna_colors",
          "brown_colors",
          false
        ],
        [
          "sienna_colors",
          "hierarchyAble",
          false
        ],
        [
          "sienna_colors",
          "isEdee",
          false
        ],
        [
          "sienna_colors",
          "isEder",
          false
        ],
        [
          "sienna_colors",
          "object",
          false
        ],
        [
          "sienna_colors",
          "property",
          false
        ],
        [
          "sienna_colors",
          "queryable",
          false
        ],
        [
          "sienna_colors",
          "theAble",
          false
        ],
        [
          "silver_colors",
          "gray_colors",
          false
        ],
        [
          "silver_colors",
          "hierarchyAble",
          false
        ],
        [
          "silver_colors",
          "isEdee",
          false
        ],
        [
          "silver_colors",
          "isEder",
          false
        ],
        [
          "silver_colors",
          "object",
          false
        ],
        [
          "silver_colors",
          "property",
          false
        ],
        [
          "silver_colors",
          "queryable",
          false
        ],
        [
          "silver_colors",
          "theAble",
          false
        ],
        [
          "snow_colors",
          "hierarchyAble",
          false
        ],
        [
          "snow_colors",
          "isEdee",
          false
        ],
        [
          "snow_colors",
          "isEder",
          false
        ],
        [
          "snow_colors",
          "object",
          false
        ],
        [
          "snow_colors",
          "property",
          false
        ],
        [
          "snow_colors",
          "queryable",
          false
        ],
        [
          "snow_colors",
          "theAble",
          false
        ],
        [
          "snow_colors",
          "white_colors",
          false
        ],
        [
          "tan_colors",
          "brown_colors",
          false
        ],
        [
          "tan_colors",
          "hierarchyAble",
          false
        ],
        [
          "tan_colors",
          "isEdee",
          false
        ],
        [
          "tan_colors",
          "isEder",
          false
        ],
        [
          "tan_colors",
          "object",
          false
        ],
        [
          "tan_colors",
          "property",
          false
        ],
        [
          "tan_colors",
          "queryable",
          false
        ],
        [
          "tan_colors",
          "theAble",
          false
        ],
        [
          "teal_colors",
          "green_colors",
          false
        ],
        [
          "teal_colors",
          "hierarchyAble",
          false
        ],
        [
          "teal_colors",
          "isEdee",
          false
        ],
        [
          "teal_colors",
          "isEder",
          false
        ],
        [
          "teal_colors",
          "object",
          false
        ],
        [
          "teal_colors",
          "property",
          false
        ],
        [
          "teal_colors",
          "queryable",
          false
        ],
        [
          "teal_colors",
          "theAble",
          false
        ],
        [
          "that",
          "thisitthat",
          false
        ],
        [
          "the",
          "articlePOS",
          false
        ],
        [
          "theAble",
          "theAble",
          false
        ],
        [
          "this",
          "pronoun",
          false
        ],
        [
          "this",
          "queryable",
          false
        ],
        [
          "this",
          "thisitthat",
          false
        ],
        [
          "thisitthat",
          "queryable",
          false
        ],
        [
          "to",
          "preposition",
          false
        ],
        [
          "toAble",
          "toAble",
          false
        ],
        [
          "turquoise_colors",
          "blue_colors",
          false
        ],
        [
          "turquoise_colors",
          "hierarchyAble",
          false
        ],
        [
          "turquoise_colors",
          "isEdee",
          false
        ],
        [
          "turquoise_colors",
          "isEder",
          false
        ],
        [
          "turquoise_colors",
          "object",
          false
        ],
        [
          "turquoise_colors",
          "property",
          false
        ],
        [
          "turquoise_colors",
          "queryable",
          false
        ],
        [
          "turquoise_colors",
          "theAble",
          false
        ],
        [
          "type",
          "property",
          false
        ],
        [
          "type",
          "whatAble",
          false
        ],
        [
          "unknown",
          "hierarchyAble",
          false
        ],
        [
          "unknown",
          "object",
          false
        ],
        [
          "unknown",
          "queryable",
          false
        ],
        [
          "unknown",
          "theAble",
          false
        ],
        [
          "user",
          "reportable",
          false
        ],
        [
          "user",
          "theAble",
          false
        ],
        [
          "verby",
          "verby",
          false
        ],
        [
          "violet_colors",
          "hierarchyAble",
          false
        ],
        [
          "violet_colors",
          "isEdee",
          false
        ],
        [
          "violet_colors",
          "isEder",
          false
        ],
        [
          "violet_colors",
          "object",
          false
        ],
        [
          "violet_colors",
          "property",
          false
        ],
        [
          "violet_colors",
          "purple_colors",
          false
        ],
        [
          "violet_colors",
          "queryable",
          false
        ],
        [
          "violet_colors",
          "theAble",
          false
        ],
        [
          "what",
          "object",
          false
        ],
        [
          "what",
          "queryable",
          false
        ],
        [
          "whatAble",
          "queryable",
          false
        ],
        [
          "white_colors",
          "color_colors",
          false
        ],
        [
          "white_colors",
          "hierarchyAble",
          false
        ],
        [
          "white_colors",
          "isEdee",
          false
        ],
        [
          "white_colors",
          "isEder",
          false
        ],
        [
          "white_colors",
          "object",
          false
        ],
        [
          "white_colors",
          "property",
          false
        ],
        [
          "white_colors",
          "queryable",
          false
        ],
        [
          "white_colors",
          "theAble",
          false
        ],
        [
          "whose",
          "object",
          false
        ],
        [
          "xfx",
          "queryable",
          false
        ],
        [
          "yellow_colors",
          "color_colors",
          false
        ],
        [
          "yellow_colors",
          "hierarchyAble",
          false
        ],
        [
          "yellow_colors",
          "isEdee",
          false
        ],
        [
          "yellow_colors",
          "isEder",
          false
        ],
        [
          "yellow_colors",
          "object",
          false
        ],
        [
          "yellow_colors",
          "property",
          false
        ],
        [
          "yellow_colors",
          "queryable",
          false
        ],
        [
          "yellow_colors",
          "theAble",
          false
        ]
      ],
      "metadata": {
        "opChoices": [
          {
            "op": [
              "unknown",
              0
            ],
            "ops": [
              [
                "user",
                0
              ],
              [
                "modifies",
                0
              ],
              [
                "unknown",
                0
              ]
            ],
            "counter": 1
          },
          {
            "op": [
              "user",
              0
            ],
            "ops": [
              [
                "user",
                0
              ],
              [
                "modifies",
                0
              ]
            ],
            "counter": 2
          },
          {
            "op": [
              "modifies",
              0
            ],
            "ops": [
              [
                "modifies",
                0
              ]
            ],
            "counter": 3
          }
        ]
      },
      "trace": "\n\n>>>>>>>>>>>>> Counter 1\n    0. user/0  (1, 1) - \"user\"\n                                   {\n                                     collection: \"users\"\n                                     database: \"sample_mflix\"\n                                     marker: Operator(user/0, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     number: \"one\"\n                                     path: [\n                                     'name'\n                                     ]\n                                     range: {'start': 0, 'end': 3}\n                                     text: \"user\"\n                                     word: \"user\"\n                                   }\n    1. modifies/0  (1, 4) - \"modifies\"\n                                   {\n                                     flatten: false\n                                     marker: Operator(modifies/0, ['Selector(Bridge(\\'{ ...next(operator), modifiers: before, concept: after[0] }\\'), , [Repeated(Listable(Not([\"Properties({(\\'context\\', \\'punctuation\\'): Matcher_Variable(\\'true\\')})\"])), 0)]<==>[Any], bridge(bridge))'], evaluator(Bridge('{ ...next(operator), modifiers: before, concept: after[0] }')), variables({}) bridge(bridge))\n                                     number: \"one\"\n                                     range: {'start': 5, 'end': 12}\n                                     text: \"modifies\"\n                                     word: \"modifies\"\n                                   }\n    2. unknown/0  (1, 6) - \"collection\"\n                                   {\n                                     marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge))\n                                     range: {'start': 14, 'end': 23}\n                                     text: \"collection\"\n                                     unknown: true\n                                     value: \"collection\"\n                                     word: \"collection\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=2) is Context({marker: Operator(unknown/0, [\"Selector(Bridge('{ ...next(operator), unknown: true, dead: true }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator), unknown: true, dead: true }')), variables({}) bridge(bridge)), range: {'start': 14, 'end': 23}, text: collection, unknown: True, value: collection, word: collection})\n\n>>>>>>>>>>>>> Counter 2\n    0. user/0  (1, 1) - \"user\"\n                                   {\n                                     collection: \"users\"\n                                     database: \"sample_mflix\"\n                                     marker: Operator(user/0, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     number: \"one\"\n                                     path: [\n                                     'name'\n                                     ]\n                                     range: {'start': 0, 'end': 3}\n                                     text: \"user\"\n                                     word: \"user\"\n                                   }\n    1. modifies/0  (1, 4) - \"modifies\"\n                                   {\n                                     flatten: false\n                                     marker: Operator(modifies/0, ['Selector(Bridge(\\'{ ...next(operator), modifiers: before, concept: after[0] }\\'), , [Repeated(Listable(Not([\"Properties({(\\'context\\', \\'punctuation\\'): Matcher_Variable(\\'true\\')})\"])), 0)]<==>[Any], bridge(bridge))'], evaluator(Bridge('{ ...next(operator), modifiers: before, concept: after[0] }')), variables({}) bridge(bridge))\n                                     number: \"one\"\n                                     range: {'start': 5, 'end': 12}\n                                     text: \"modifies\"\n                                     word: \"modifies\"\n                                   }\n   *2. unknown/1 (dead) (2, 0) - \"collection\"\n                                   {\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 14, 'end': 23}\n                                     text: \"collection\"\n                                     unknown: true\n                                     value: \"collection\"\n                                     word: \"collection\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=0) is Context({collection: users, database: sample_mflix, marker: Operator(user/0, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: one, path: ['name'], range: {'start': 0, 'end': 3}, text: user, word: user})\n\n>>>>>>>>>>>>> Counter 3\n   *0. user/1 (dead) (2, 1) - \"user\"\n                                   {\n                                     collection: \"users\"\n                                     database: \"sample_mflix\"\n                                     dead: true\n                                     marker: Operator(user/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                     number: \"one\"\n                                     path: [\n                                     'name'\n                                     ]\n                                     range: {'start': 0, 'end': 3}\n                                     text: \"user\"\n                                     word: \"user\"\n                                   }\n    1. modifies/0  (1, 4) - \"modifies\"\n                                   {\n                                     flatten: false\n                                     marker: Operator(modifies/0, ['Selector(Bridge(\\'{ ...next(operator), modifiers: before, concept: after[0] }\\'), , [Repeated(Listable(Not([\"Properties({(\\'context\\', \\'punctuation\\'): Matcher_Variable(\\'true\\')})\"])), 0)]<==>[Any], bridge(bridge))'], evaluator(Bridge('{ ...next(operator), modifiers: before, concept: after[0] }')), variables({}) bridge(bridge))\n                                     number: \"one\"\n                                     range: {'start': 5, 'end': 12}\n                                     text: \"modifies\"\n                                     word: \"modifies\"\n                                   }\n    2. unknown/1 (dead) (2, 0) - \"collection\"\n                                   {\n                                     dead: true\n                                     marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                     range: {'start': 14, 'end': 23}\n                                     text: \"collection\"\n                                     unknown: true\n                                     value: \"collection\"\n                                     word: \"collection\"\n                                   }\n<<<<<<<<<<<<<\nNext Op (index=1) is Context({flatten: False, marker: Operator(modifies/0, ['Selector(Bridge(\\'{ ...next(operator), modifiers: before, concept: after[0] }\\'), , [Repeated(Listable(Not([\"Properties({(\\'context\\', \\'punctuation\\'): Matcher_Variable(\\'true\\')})\"])), 0)]<==>[Any], bridge(bridge))'], evaluator(Bridge('{ ...next(operator), modifiers: before, concept: after[0] }')), variables({}) bridge(bridge)), number: one, range: {'start': 5, 'end': 12}, text: modifies, word: modifies})\n\n>>>>>>>>>>>>> Counter 4\n   *0. modifies/1 (dead) (3, 0) - \"user modifies collection\"\n                                   {\n                                     concept:                                          {\n                                           dead: true\n                                           marker: Operator(unknown/1, [\"Selector(Bridge('{ ...next(operator) }'), , []<==>[], bridge(bridge))\"], evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge))\n                                           range: {'start': 14, 'end': 23}\n                                           text: \"collection\"\n                                           unknown: true\n                                           value: \"collection\"\n                                           word: \"collection\"\n                                         }\n\n                                     dead: true\n                                     flatten: false\n                                     marker: Operator(modifies/1, ['Selector(None, , [Repeated(Listable(Not([\"Properties({(\\'context\\', \\'punctuation\\'): Matcher_Variable(\\'true\\')})\"])), 0)]<==>[Any], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                     modifiers: [\n                                       {\n                                         collection: \"users\"\n                                         database: \"sample_mflix\"\n                                         dead: true\n                                         marker: Operator(user/1, ['Selector(None, , []<==>[], bridge(bridge))'], evaluator(None), variables({}) bridge(bridge))\n                                         number: \"one\"\n                                         path: [\n                                         'name'\n                                         ]\n                                         range: {'start': 0, 'end': 3}\n                                         text: \"user\"\n                                         word: \"user\"\n                                       }\n                                     ]\n                                     number: \"one\"\n                                     range: {'start': 0, 'end': 23}\n                                     text: \"user modifies collection\"\n                                     word: \"modifies\"\n                                   }\n<<<<<<<<<<<<<\n",
      "contexts": [
        {
          "word": "modifies",
          "number": "one",
          "flatten": false,
          "text": "user modifies collection",
          "marker": "modifies",
          "range": {
            "start": 0,
            "end": 23
          },
          "dead": true,
          "modifiers": [
            {
              "word": "user",
              "number": "one",
              "database": "sample_mflix",
              "collection": "users",
              "path": [
                "name"
              ],
              "text": "user",
              "marker": "user",
              "range": {
                "start": 0,
                "end": 3
              },
              "dead": true,
              "level": 1
            }
          ],
          "concept": {
            "value": "collection",
            "unknown": true,
            "text": "collection",
            "marker": "unknown",
            "word": "collection",
            "range": {
              "start": 14,
              "end": 23
            },
            "dead": true,
            "level": 1
          },
          "level": 1,
          "topLevel": true,
          "touchedBy": [
            "mongo#call2",
            "instance0#mongo#call2"
          ]
        }
      ],
      "generated": [
        ""
      ],
      "paraphrases": [
        "user modifies collection"
      ],
      "paraphrasesParenthesized": [],
      "generatedParenthesized": [],
      "responses": [
        ""
      ],
      "associations": [
        [
          [
            "modifies",
            0
          ],
          [
            "unknown",
            0
          ],
          [
            "user",
            0
          ]
        ],
        [
          [
            "modifies",
            0
          ],
          [
            "unknown",
            1
          ]
        ],
        [
          [
            "modifies",
            0
          ],
          [
            "unknown",
            1
          ],
          [
            "user",
            0
          ]
        ]
      ],
      "learned_contextual_priorities": [],
      "query": "user modifies collection",
      "key": {
        "query": "user modifies collection"
      }
    },
    {
      "extraConfig": true,
      "name": "mongo",
      "operators": [
        "([make] ([report]))",
        "([state])",
        "([changeState|make] ([reportElement]) (state/*))",
        "([reportElementProperty])",
        "((reportElement/* && !@<color_colors && !@<case) [compoundReportElement] (reportElement/* && !@<color_colors && !@<case))",
        "([background])",
        "([header])",
        "([table])",
        "([case])",
        "([uppercase])",
        "([lowercase])",
        "([show] (reportable/*))",
        "([showCollection|show] (collection/*))",
        "([showReport|show] (report/*))",
        "([capitalize] ([reportElement]))",
        "([sales|])",
        "([year])",
        "([email])",
        "([movie])",
        "([thisReportElement|this] (reportElement/*))"
      ],
      "hierarchy": [
        [
          "color_colors",
          "state"
        ],
        [
          "case",
          "state"
        ],
        [
          "color_colors",
          "reportElement"
        ],
        [
          "case",
          "reportElement"
        ]
      ],
      "bridges": [
        {
          "id": "case",
          "words": [
            {
              "word": "case",
              "number": "one"
            },
            {
              "word": "cases",
              "number": "many"
            }
          ],
          "isA": [
            "reportElementProperty"
          ]
        },
        {
          "id": "uppercase",
          "words": [
            {
              "word": "upper",
              "number": "one",
              "value": "uppercase"
            },
            {
              "word": "uppers",
              "number": "many",
              "value": "uppercase"
            }
          ],
          "isA": [
            "case"
          ]
        },
        {
          "id": "lowercase",
          "words": [
            {
              "word": "lower",
              "number": "one",
              "value": "lowercase"
            },
            {
              "word": "lowers",
              "number": "many",
              "value": "lowercase"
            }
          ],
          "isA": [
            "case"
          ]
        },
        {
          "id": "reportElementProperty"
        },
        {
          "id": "compoundReportElement",
          "convolution": true,
          "isA": [
            "reportElement",
            "theAble"
          ],
          "bridge": "{ ...next(operator), reportElements: append(default(before[0].reportElements, [before[0]]), default(after[0].reportElements, [after[0]])) }"
        },
        {
          "id": "make",
          "bridge": "{ ...next(operator), report: after[0] }",
          "parents": [
            "verby"
          ]
        },
        {
          "id": "state",
          "bridge": "{ ...next(operator) }"
        },
        {
          "id": "thisReportElement",
          "parents": [
            "articlePOS"
          ],
          "bridge": "{ ...next(after[0]), modifiers: append(['this'], after[0].modifiers), this: operator }"
        },
        {
          "id": "changeState",
          "bridge": "{ ...next(operator), reportElement: after[0], newState: after[1] }",
          "parents": [
            "verby"
          ]
        },
        {
          "id": "capitalize",
          "parents": [
            "verby"
          ],
          "bridge": "{ ...next(operator), element: after[0] }"
        },
        {
          "id": "this",
          "parents": [
            "reportElement"
          ]
        },
        {
          "id": "reportElement"
        },
        {
          "id": "header",
          "words": [
            {
              "word": "header",
              "number": "one"
            },
            {
              "word": "headers",
              "number": "many"
            }
          ],
          "parents": [
            "theAble",
            "reportElement"
          ]
        },
        {
          "id": "background",
          "words": [
            {
              "word": "background",
              "number": "one"
            },
            {
              "word": "backgrounds",
              "number": "many"
            }
          ],
          "parents": [
            "theAble",
            "reportElement",
            "reportElementProperty"
          ]
        },
        {
          "id": "table",
          "words": [
            {
              "word": "table",
              "number": "one"
            },
            {
              "word": "tables",
              "number": "many"
            }
          ],
          "parents": [
            "theAble",
            "reportElement"
          ]
        },
        {
          "id": "report",
          "parents": [
            "theAble",
            "nameable"
          ]
        },
        {
          "id": "showReport",
          "bridge": "{ ...next(operator), show: after[0] }",
          "parents": [
            "verby"
          ]
        },
        {
          "id": "showCollection",
          "bridge": "{ ...next(operator), show: after[0] }",
          "parents": [
            "verby"
          ]
        },
        {
          "id": "show",
          "bridge": "{ ...next(operator), show: after[0] }",
          "parents": [
            "verby"
          ]
        },
        {
          "id": "sales",
          "parents": [
            "reportable",
            "theAble"
          ],
          "words": [
            {
              "word": "sales",
              "database": "mongo_test_database",
              "collection": "sales",
              "path": [
                "sales"
              ]
            }
          ]
        },
        {
          "id": "year",
          "parents": [
            "reportable",
            "theAble"
          ],
          "words": [
            {
              "word": "year",
              "database": "mongo_test_database",
              "collection": "sales",
              "path": [
                "year"
              ]
            }
          ]
        },
        {
          "id": "email",
          "parents": [
            "reportable",
            "theAble"
          ],
          "words": [
            {
              "word": "email",
              "database": "sample_mflix",
              "collection": "users",
              "path": [
                "email"
              ]
            }
          ]
        },
        {
          "id": "movie",
          "parents": [
            "reportable",
            "theAble"
          ],
          "words": [
            {
              "word": "movies",
              "database": "sample_mflix",
              "collection": "movies",
              "path": [
                "title"
              ]
            }
          ]
        }
      ],
      "priorities": [
        {
          "context": [
            [
              "show",
              0
            ],
            [
              "list",
              0
            ]
          ],
          "choose": [
            1
          ]
        }
      ]
    }
  ],
  "fragments": [],
  "semantics": [],
  "associations": [
    [
      [
        "a",
        0
      ],
      [
        "concept",
        0
      ],
      [
        "is",
        0
      ],
      [
        "unknown",
        0
      ]
    ],
    [
      [
        "a",
        0
      ],
      [
        "concept",
        0
      ],
      [
        "is",
        0
      ],
      [
        "unknown",
        1
      ]
    ],
    [
      [
        "a",
        0
      ],
      [
        "is",
        0
      ],
      [
        "unknown",
        1
      ]
    ],
    [
      [
        "is",
        0
      ],
      [
        "unknown",
        1
      ]
    ],
    [
      [
        "modifies",
        0
      ],
      [
        "unknown",
        0
      ],
      [
        "user",
        0
      ]
    ],
    [
      [
        "modifies",
        0
      ],
      [
        "unknown",
        1
      ]
    ],
    [
      [
        "modifies",
        0
      ],
      [
        "unknown",
        1
      ],
      [
        "user",
        0
      ]
    ]
  ],
  "learned_contextual_priorities": []
}